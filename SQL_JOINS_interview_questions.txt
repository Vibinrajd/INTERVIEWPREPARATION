  	 JOINS
1.  What are SQL JOINs? 
   - SQL JOINs are used to combine rows from two or more tables based on a related column between them.

2.  What are the different types of JOINs in SQL? 
   - There are several types of JOINs in SQL, including INNER JOIN, LEFT JOIN, RIGHT JOIN, and FULL JOIN.

3.  How is the INNER JOIN executed? 
   - INNER JOIN returns only the rows where there is a match in both tables based on the specified condition.

4.  How is a UNION clause different from a JOIN clause? 
   - UNION combines the result sets of two SELECT statements, removing duplicate rows. JOIN combines rows from two or more tables based on a related column.

5.  What do you understand by Non-EQUI JOIN? 
   - A Non-EQUI JOIN is a join that uses non-equality operators (such as `<`, `>`, `<=`, or `>=`) to establish a relationship between columns.

6.  How will you join a table to itself? 
   - You can join a table to itself by using aliases for the table and specifying the conditions for the self-join.

7.  What do you understand about Nested JOINs? 
   - Nested JOINs involve using multiple JOIN clauses within the same query to join more than two tables.

8.  How will you use a subquery to execute INNER JOINs for more than two tables? 
   - You can use subqueries to perform INNER JOINs involving more than two tables by nesting the subqueries.

9.  Discuss a common pitfall with using JOIN. 
   - A common pitfall is forgetting to specify the join condition or using an incorrect condition, leading to unintended results or errors.

10.  In a one-to-many relationship, how should the data be organized to perform join operations? And in a many-to-many relationship? 
    - In a one-to-many relationship, the "one" side should have a unique identifier, and the "many" side should reference this identifier. In a many-to-many relationship, a junction table is used to associate rows from the two tables.

11.  What distinguishes a full join from a cross join? 
    - A FULL JOIN returns all rows from both tables, filling in NULLs for non-matching rows. A CROSS JOIN returns the Cartesian product of the two tables, producing all possible combinations.

12.  Write a query that shows the output of the first 5 rows in table T1? 
    - `SELECT * FROM T1 LIMIT 5;`

13.  How can you optimize a join operation for performance when dealing with large datasets? 
    - Proper indexing, selecting only necessary columns, and using appropriate join types can optimize join operations.

14.  Explain the difference between the USING clause and the ON clause when performing joins. 
    - The `USING` clause is used to specify the columns for equi-join conditions with the same name, while the `ON` clause is more general and allows specifying any conditions.

15.  How would you find records that have no matching rows in another table using an SQL join? 
    - Use a `LEFT JOIN` and check for NULL values in columns from the right table.

16.  Can you use the NATURAL JOIN in any situation? What are the potential drawbacks of using it? 
    - The NATURAL JOIN is not recommended as it automatically joins tables based on columns with the same name, which might lead to unintended matches.

17.  How can you simulate a LEFT JOIN using other types of joins? 
    - Use an `INNER JOIN` or `RIGHT JOIN` and include additional conditions to simulate a `LEFT JOIN`.

18.  In what situations would you use a non-equijoin (join using non-equality operators) in your SQL queries? 
    - Non-equijoin may be used when the relationship between columns involves operators other than equality.

19.  Can you use aggregate functions with joins? If yes, provide an example. 
    - Yes, aggregate functions can be used with joins. Example:
      SQL
      SELECT department, AVG(salary)
      FROM employees
      JOIN departments ON employees.department_id = departments.department_id
      GROUP BY department;

GROUP BY
20.  What is the purpose of the GROUP BY clause in SQL, and how is it different from the ORDER BY clause? 
    - The `GROUP BY` clause is used to group rows based on specified columns and apply aggregate functions. It is different from `ORDER BY`, which is used to sort the result set.

21.  Explain the difference between aggregate functions and regular functions in SQL. Provide examples of each. 
    - Aggregate functions perform calculations on a set of values and return a single value, while regular functions operate on individual rows. Example:
      SQL
      -- Aggregate function (SUM)
      SELECT department, SUM(salary) FROM employees GROUP BY department;

      -- Regular function (UPPER)
      SELECT UPPER(employee_name) FROM employees;
      
22.  How does the HAVING clause differ from the WHERE clause? When would you use one over the other? 
    - The `WHERE` clause filters rows before grouping, and the `HAVING` clause filters after grouping. Use `WHERE` for filtering individual rows, and `HAVING` for filtering groups based on aggregate conditions.

23.  Can you use an alias in the GROUP BY clause? If so, explain how it works. 
    - Yes, you can use an alias in the `GROUP BY` clause. It works by referencing the alias instead of the original column name.

24.  Describe the order of execution in a SQL query containing the GROUP BY clause. 
    - The order of execution is: `FROM` clause, `WHERE` clause, `GROUP BY` clause, `HAVING` clause, `SELECT` clause, `ORDER BY` clause.

25.  Can you use an aggregate function without using the GROUP BY clause? If yes, explain with examples. 
    - Yes, you can use aggregate functions without the `GROUP BY` clause to calculate values across the entire result set.
      SQL
      SELECT COUNT(*), AVG(salary) FROM employees;
      
26.  How do you handle NULL values when using aggregate functions with GROUP BY? 
    - Aggregate functions generally ignore NULL values, but you can use functions like `COALESCE` or `IFNULL` to handle them explicitly.

27.  Explain the role of the COUNT(), SUM(), AVG(), MIN(), and MAX() functions in conjunction with GROUP BY. 
    - These functions are used to perform calculations on groups of rows defined by the `GROUP BY` clause. For example, `COUNT()` counts the number of rows in each group.

28.  What are the restrictions on using non-aggregated columns in the SELECT clause when the GROUP BY clause is present? 
    - Columns in the `SELECT` clause without an aggregate function must be included in the `GROUP BY` clause.

29.  Can you use multiple columns in the GROUP BY clause? If so, how does it affect the grouping and results? 
    - Yes, you can use multiple columns in the `GROUP BY` clause to create more granular groups based on multiple criteria.

30.  How would you find the second-highest or second-lowest value in a specific column using the GROUP BY clause? 
    - You can use subqueries or window functions like `ROW_NUMBER()` to find the second-highest or second-lowest values.

31.  In which situations would you consider using the ROLLUP or CUBE extensions in conjunction with GROUP BY? 
    - ROLLUP and CUBE are used for creating subtotals and grand totals in result sets. ROLLUP generates subtotals, and CUBE generates subtotals and grand totals.



32.  How do you filter groups based on certain criteria using the GROUP BY and HAVING clauses together? 
    - Use the `HAVING` clause to filter groups based on aggregate conditions.
      SQL
      SELECT department, AVG(salary)
      FROM employees
      GROUP BY department
      HAVING AVG(salary) > 50000;

33.  Can you nest GROUP BY clauses to achieve multi-level grouping? Provide an example. 
    - Yes, you can nest `GROUP BY` clauses for multi-level grouping.
      SQL
      SELECT department, job_title, AVG(salary)
      FROM employees
      GROUP BY department, job_title;

SET OPERATORS
34.  Explain the purpose of set operators in SQL and provide examples of their usage. 
    - Set operators (UNION, UNION ALL, INTERSECT, EXCEPT) combine the results of two or more SELECT statements. Example:
      SQL
      SELECT column1 FROM table1
      UNION
      SELECT column1 FROM table2;

35.  What are the common set operators in SQL, and how do they differ from each other? 
    - Common set operators include UNION, UNION ALL, INTERSECT, and EXCEPT. UNION removes duplicates, UNION ALL includes duplicates, INTERSECT returns common rows, and EXCEPT returns distinct rows from the first query that are not present in the second query.

36.  Can you use set operators on tables with different column names but compatible data types? Explain your answer. 
    - Yes, set operators can be used on tables with different column names as long as the data types are compatible. The result set will use the column names from the first SELECT statement.

37.  Describe the precedence rules when using multiple set operators in a single SQL query. 
    - Precedence follows the order: UNION, INTERSECT, EXCEPT. Operators with the same precedence are evaluated left to right.

38.  How do you handle duplicate rows when using set operators? Can you control the inclusion of duplicates in the result? 
    - UNION removes duplicates, while UNION ALL includes duplicates. You can control duplicates by choosing the appropriate set operator.

39.  Can you use the ORDER BY clause with set operators? If so, how does it affect the result? 
    - Yes, you can use the ORDER BY clause with set operators to sort the final result set based on specified columns.

40.  When would you use the UNION operator, and when would you use the UNION ALL operator? Provide examples. 
    - Use UNION when you want to remove duplicates and UNION ALL when duplicates are acceptable.
      SQL
      -- UNION removes duplicates
      SELECT column1 FROM table1
      UNION
      SELECT column1 FROM table2;

      -- UNION ALL includes duplicates
      SELECT column1 FROM table1
      UNION ALL
      SELECT column1 FROM table2;


41.  How can you simulate the functionality of the FULL OUTER JOIN using set operators? 
    - Simulate a FULL OUTER JOIN using a combination of UNION and LEFT/RIGHT JOIN.
      SQL
      SELECT * FROM table1
      LEFT JOIN table2 ON table1.id = table2.id
      UNION
      SELECT * FROM table1
      RIGHT JOIN table2 ON table1.id = table2.id;

42.  Explain the concept of "corresponding columns" when using the INTERSECT and EXCEPT operators. 
    - "Corresponding columns" refers to columns with the same position and compatible data types in the SELECT statements being combined using INTERSECT and EXCEPT.

43.  Can you use set operators on more than two tables? If so, how does the operation work with multiple tables? 
    - Yes, set operators can be used on more than two tables by chaining them together. The operation works from left to right.

44.  How do you combine set operators with other clauses like WHERE, GROUP BY, or HAVING in a single query? 
   - You can combine set operators with other clauses like WHERE, GROUP BY, or HAVING in a single query. For example:
     SQL
     SELECT column FROM table WHERE condition
     UNION
     SELECT column FROM table2 GROUP BY column HAVING condition;
     
45.  Performance Considerations: 
   - Performance considerations include sorting, eliminating duplicates, and potential impact on large datasets. Proper indexing, optimization, and considering alternative approaches are crucial.

46.  Set Operators with Subqueries: 
   - Yes, set operators can be used with subqueries. For example:
     SQL
     SELECT column FROM table1
     UNION
     SELECT column FROM (SELECT * FROM table2 WHERE condition) AS subquery;
     
47.  Handling NULL Values: 
   - Set operators treat NULL values as equivalent, and duplicates with NULLs are eliminated. COALESCE or IFNULL functions can be used for specific handling.

48.  Finding Common Elements: 
   - To find common elements from multiple tables, use INTERSECT:
     SQL
     SELECT column FROM table1
     INTERSECT
     SELECT column FROM table2
     INTERSECT
     SELECT column FROM table3;

 PARTITION BY: 
49.  Purpose and Difference from GROUP BY: 
   - The PARTITION BY clause in SQL is used with window functions to divide the result set into partitions, performing operations on each independently. It differs from GROUP BY, which aggregates the entire result set.

50.  Window Functions with PARTITION BY: 
   - Window functions allow calculations across a specified range of rows related to the current row. Example:
     SQL
     SELECT column, SUM(value) OVER (PARTITION BY category ORDER BY date) AS running_total
     FROM table;
     
51.  Controlling Row Ordering: 
   - Order rows within each partition using the ORDER BY clause within the window function.

52.  Finding Maximum Value in Each Partition: 
   SQL
   SELECT column, MAX(value) OVER (PARTITION BY category) AS max_value
   FROM table;
   
53.  Calculating Cumulative Sum: 
   SQL
   SELECT column, SUM(value) OVER (PARTITION BY category ORDER BY date) AS cumulative_sum
   FROM table;
   
54.  Ranking Rows within Partitions: 
   SQL
   SELECT column, RANK() OVER (PARTITION BY category ORDER BY value DESC) AS ranking
   FROM table;
   
55.  Differences from Subqueries/CTEs: 
   - PARTITION BY is more efficient for tasks involving window functions, avoiding repeated scans. Subqueries/CTEs might be less performant for similar tasks.

56.  Handling NULL Values: 
   - NULL values can be controlled using the NULLS FIRST or NULLS LAST option within the ORDER BY clause of the window function.
